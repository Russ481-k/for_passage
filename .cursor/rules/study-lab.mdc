---
alwaysApply: true
---
# Cursor Rules — study-lab

## Objectives
- 날짜별 학습계획(schedule.yaml)에 맞춰 “개념 → 문제 → 풀이 → 오답정리 → 복습”을 보조한다.
- 코드는 **테스트 주도(TDD)**로 수정 제안 → 최소 변경으로 통과.
- 독학사/기사 공통 고빈출( SQL/정규화/트랜잭션, 정렬·탐색·그래프, Java OOP, 보안/테스트/OS·NW )을 우선한다.

## Interaction Style
- 매 세션 시작 시 `scripts/today.py` 결과를 요약하고 오늘 목표 파일/테스트 경로를 제시한다.
- 변경은 항상 diff 또는 patch 형태로 제안하고, 근거(기출개념/복잡도/표준)를 3줄 이내로 명시.
- 풀이 후, **오답키워드**와 **재복습 날짜(1D/3D/7D)**를 `review.md`에 append 하도록 사용자에게 안내.

## Guardrails
- 외부 리소스 설치/다운로드 제안 금지(로컬 템플릿 내에서 해결).
- 테스트 깨지면 원인 → 재현 → 최소패치 → 재검증 순서 고수.
- 코드 스타일: Python(PEP8), Java(Google Style), C(경고 -Wall 무시 금지).

## Typical Workflows
1) **Daily Run**
   - `scripts/today.py` → 오늘 범위 파악 → 관련 테스트 파일 열기
   - 개념 5문항 퀵체크 → 간단 실습 → 테스트 실행 → 실패 분석 → 수정 패치
2) **SQL Drill**
   - `sql/exercises.sql`의 TODO 한 개 선택 → 쿼리 작성 → `verify.sql`로 검증 논리 확인
3) **Algorithm TDD**
   - `algorithms/tests/test_*.py` 중 실패 테스트부터 → `src/*.py` 최소 구현
4) **Java OOP**
   - `OopBasicsTest.java` 실패 항목을 통과시키며 개념 정리(상속/다형성/예외)

## Documentation Workflow
- 모든 학습 활동(문제 풀이, 개념 정리)은 사용자의 요청에 따라 `log/` 디렉터리 아래에 상세한 문서 세트로 기록한다.
- **구조**:
  - 각 학습 세션은 `log/{category}/{YYYY-MM-DD}-{topic}/` 형태의 개별 디렉터리로 관리된다.
  - 디렉터리 내에는 개념, 예시, 문제, 풀이 등 각 섹션이 별도의 마크다운 파일로 생성된다.
    - 예: `1_Introduction.md`, `2_Concepts.md`, `3_Exercises.md`, `4_Solutions.md`
- **프로세스**:
  1. 사용자가 `[분야] 주제` 형식으로 학습을 요청.
  2. 해당 주제에 대한 학습 폴더(`log/{category}/{YYYY-MM-DD}-{topic}/`)를 생성.
  3. 폴더 내에, 흥미를 유발하는 상세한 설명, 풍부한 예시, 10개의 연습 문제, 그리고 치밀한 풀이가 담긴 개별 마크다운 파일을 생성.
  4. 최종적으로 생성된 문서들과 핵심 복습 키워드를 안내하고, [review.md](mdc:review.md)에 기록하도록 유도.
- **콘텐츠 가이드라인**:
  - **상세함**: 각 개념을 초심자도 이해할 수 있도록 깊이 있게 설명.
  - **풍부한 예시**: 학습 내용을 실제 코드/쿼리/문장으로 보여주는 다양한 예시 포함.
  - **질 높은 문제**: 개념 이해도를 확인할 수 있는 10개의 실용적인 문제 제공.
  - **치밀한 풀이**: 단순히 정답만 제시하는 것이 아니라, 왜 그렇게 되는지 단계별로 상세히 해설.